#+TITLE: HTTP基础
#+AUTHOR: Haoran Liu
#+EMAIL: haoran.mc@outlook.com
#+DATE: 2022-12-25 01:12 Sun
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="static/css/org.css"/>
#+DESCRIPTION: Copyright © 2022, Haoran Liu, all rights reserved.

* 标准库启动Web服务
Go语言内置了 ~net/http~ 库，封装了 HTTP 网络编程的基础接口，我们实现的是 ~Gee~ Web框架便是基于 ~net/http~ 的，简单介绍下 ~net/http~ 库的使用。

#+begin_src go
  package main

  import (
      "fmt"
      "log"
      "net/http"
  )

  func main() {
      http.HandleFunc("/", indexHandler)
      http.HandleFunc("/hello", helloHandler)
      log.Fatal(http.ListenAndServe(":9999", nil))
  }

  // handler echoes r.URL.Path
  func indexHandler(w http.ResponseWriter, req *http.Request) {
      fmt.Fprintf(w, "URL.Path = %q\n", req.URL.Path)
  }

  // handler echoes r.URL.Header
  func helloHandler(w http.ResponseWriter, req *http.Request) {
      for k, v := range req.Header {
          fmt.Fprintf(w, "Header[%q] = %q\n", k, v)
      }
  }
#+end_src

~http.HandleFunc~ 函数第一个参数是路由，第二个参数是 ~Handler~ 函数，其参数固定是请求（ ~*http.Request~ ）和响应（ ~http.ResponseWriter~ ）。

[[file:wiki.org::handle-handler][handle 与 handler 的区别]]

我们设置了两个路由， ~/~ 和 ~/hello~ ，分别绑定 /indexHandler/ 和 /helloHandler/ ，根据不同的 HTTP 请求会调用不同的处理函数。 _处理函数内部（服务端）将客户端请求的信息写入到响应（ ~w http.ResponseWriter~ ）中，函数内部还可以设置 HTTP 响应报文，比如响应状态码、响应报文头属性（Content-Type、Cache-Control、Set-Cookie ......）、响应报文体等。_

[[file:Network-HTTP请求行、请求头、请求体详解.org][HTTP请求行、请求头、请求体详解]]

根据我们的代码，访问 ~/~ ，响应是 ~URL.Path = /~ ，而 ~/hello~ 的响应则是请求头（header）中的键值对信息。

用 ~curl~ 这个工具测试一下，将会得到如下结果：

#+begin_example
    $ curl http://localhost:9999/
    URL.Path = "/"
    $ curl http://localhost:9999/hello
    Header["User-Agent"] = ["curl/7.68.0"]
    Header["Accept"] = ["*/*"]
#+end_example

/main/ 函数的最后一行，是用来启动Web服务的，第一个参数是地址， ~:9999~ 表示在 /9999/ 端口监听。 _而第二个参数则代表所有的 HTTP 请求的实例， ~nil~ 代表使用标准库中的实例处理。第二个参数，则是我们基于 ~net/http~ 标准库实现 Web 框架的入口（我们通过第二个参数这个入口实现web框架）。_
* 实现 http.Handler 接口
#+begin_src go
  package http

  type Handler interface {
      ServeHTTP(w ResponseWriter, r *Request)
  }

  func ListenAndServe(address string, h Handler) error
#+end_src

第二个参数的类型是什么呢？通过查看 ~net/http~ 的源码可以发现， ~Handler~ 是一个接口，需要实现方法 /ServeHTTP/ ， _也就是说，只要传入任何实现了 /ServerHTTP/ 接口的实例，所有的 HTTP 请求，就都交给了该实例处理了_ ，马上来试一试吧。

#+begin_src go
  package main

  import (
      "fmt"
      "log"
      "net/http"
  )

  // Engine is the union handler for all requests.
  type Engine struct{}

  func (engine *Engine) ServeHTTP(w http.ResponseWriter, req *http.Request) {
      switch req.URL.Path {
      case "/":
          _, _ = fmt.Fprintf(w, "URL.Path = %q\n", req.URL.Path)
      case "/hello":
          for k, v := range req.Header {
              _, _ = fmt.Fprintf(w, "Header[%q] = %q\n", k, v)
          }
      default:
          _, _ = fmt.Fprintf(w, "404 NOT FOUND: %s\n", req.URL)
      }
  }

  func main() {
      engine := new(Engine)
      log.Fatal(http.ListenAndServe(":9999", engine))
  }
#+end_src

- 我们定义了一个空的结构体 ~Engine~ ，实现了方法 ~ServeHTTP~ 。这个方法有 2 个参数，第二个参数是 /Request/ ，该对象包含了该 HTTP 请求的所有信息，比如请求地址、Header 和 Body 等信息；第一个参数是 /ResponseWriter/ ， _利用 /ResponseWriter/ 可以构造针对该请求的响应（也就是设置HTTP响应报文中的信息 [[file:Network-HTTP请求行、请求头、请求体详解.org][HTTP请求行、请求头、请求体详解]]）_ 。
- 在 /main/ 函数中，我们给 /ListenAndServe/ 方法的第二个参数传入了刚才创建的 /engine/ 实例。 _至此，我们走出了实现 Web 框架的第一步_ ，即，将所有的 HTTP 请求转向了我们自己的处理逻辑。还记得吗，在实现 ~Engine~ 之前，我们调用 /http.HandleFunc/ 实现了路由和 Handle 的映射，也就是只能针对具体的路由写处理逻辑，比如 ~/hello~ 。但是在实现 ~Engine~ 之后，我们拦截了所有的 HTTP 请求，拥有了统一的控制入口。在这里我们可以自由定义路由映射的规则，也可以同意添加一些处理逻辑，例如日志、异常处理等。
- 代码的运行结果与之前是一致的。
* Gee 框架的雏形
我们接下来重新组织上面的代码，搭建出整个框架的雏形。

最终的代码目录结构是这样的：

#+begin_example
    gee/
     |--gee.go
     |--go.mod
    main.go
    go.mod
#+end_example
** go.mod
#+begin_example
    module example

    go 1.13

    require gee v0.0.0

    replace gee => ./gee
#+end_example

- 在 ~go.mod~ 中使用 ~replace~ 将 gee 指向 ~./gee~

#+begin_quote
从 go 1.11 版本开始，引用相对路径的 package 需要使用上述方式。
#+end_quote
** main.go
#+begin_src go
  package main

  import (
      "fmt"
      "net/http"

      "gee"
  )

  func main() {
      r := gee.New()
      r.GET("/", func(w http.ResponseWriter, req *http.Request) {
          fmt.Fprintf(w, "URL.Path = %q\n", req.URL.Path)
      })

      r.GET("/hello", func(w http.ResponseWriter, req *http.Request) {
          for k, v := range req.Header {
              fmt.Fprintf(w, "Header[%q] = %q\n", k, v)
          }
      })

      r.Run(":9999")
  }
#+end_src

看到这里，如果你使用过 /gin/ 框架的话，肯定会觉得无比的亲切。 /gee/ 框架的设计以及 API 均参考了 /gin/ 。使用 ~New()~ 创建 gee 的实例，使用 ~GET()~ 方法添加路由，最后使用 ~Run()~ 启动 Web 服务。这里的路由，只是静态路由，不支持 ~/hello/:name~ 这样的动态路由，动态路由我们将在下一次实现。
** gee.go
#+begin_src go
  package gee

  import (
      "fmt"
      "net/http"
  )

  // HandlerFunc defines the request handler used by gee
  type HandlerFunc func(http.ResponseWriter, *http.Request)

  // Engine implement the interface of ServeHTTP
  type Engine struct {
      router map[string]HandlerFunc
  }

  // New is the constructor of gee.Engine
  func New() *Engine {
      return &Engine{router: make(map[string]HandlerFunc)}
  }

  func (engine *Engine) addRoute(method string, pattern string, handler HandlerFunc) {
      key := method + "-" + pattern
      engine.router[key] = handler
  }

  // GET defines the method to add GET request
  func (engine *Engine) GET(pattern string, handler HandlerFunc) {
      engine.addRoute("GET", pattern, handler)
  }

  // POST defines the method to add POST request
  func (engine *Engine) POST(pattern string, handler HandlerFunc) {
      engine.addRoute("POST", pattern, handler)
  }

  // Run defines the method to start a http server
  func (engine *Engine) Run(addr string) (err error) {
      return http.ListenAndServe(addr, engine)
  }

  func (engine *Engine) ServeHTTP(w http.ResponseWriter, req *http.Request) {
      key := req.Method + "-" + req.URL.Path
      if handler, ok := engine.router[key]; ok {
          handler(w, req)
      } else {
          fmt.Fprintf(w, "404 NOT FOUND: %s\n", req.URL)
      }
  }
#+end_src

那么 ~gee.go~ 就是重头戏了。我们重点介绍一下这部分的实现。

- 首先定义了类型 ~HandlerFunc~ ，这是提供给框架用户的，用来定义路由映射的处理方法。 我们在 ~Engine~ 中，添加了一张路由映射表 ~router~ ，key 由请求方法和静态路由地址构成，例如 ~GET-/~ 、 ~GET-/hello~ 、 ~POST-/hello~ ，这样针对相同的路由，如果请求方法不同，可以映射不同的处理方法(Handler)，value 是用户映射的处理方法 _（也就是 RESTful 风格，否则 ~/hello~ 这个 URL 路径只能映射到一个 handler 函数）_ 。
- 当用户调用 ~(*Engine).GET()~ 方法时，会将路由和处理方法注册到映射表 /router/ 中， ~(*Engine).Run()~ 方法，是 /ListenAndServe/ 的包装。
- ~Engine~ 实现的 /ServeHTTP/ 方法的作用就是，解析请求的路径，查找路由映射表，如果查到，就执行注册的处理方法。如果查不到，就返回 /404 NOT FOUND/ 。

执行 ~go run main.go~ ，再用 /curl/ 工具访问，结果与最开始的一致。

#+begin_example
    $ curl http://localhost:9999/
    URL.Path = "/"
    $ curl http://localhost:9999/hello
    Header["User-Agent"] = ["curl/7.68.0"]
    Header["Accept"] = ["*/*"]
    $ curl http://localhost:9999/world
    404 NOT FOUND: /world
#+end_example

至此，整个 ~Gee~ 框架的原型已经出来了。实现了路由映射表，提供了用户注册静态路由的方法，包装了启动服务的函数。当然，到目前为止，我们还没有实现比 ~net/http~ 标准库更强大的能力，不用担心，很快就可以将动态路由、中间件等功能添加上去了。
