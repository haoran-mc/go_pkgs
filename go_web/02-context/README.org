#+TITLE: 上下文设计
#+AUTHOR: Haoran Liu
#+EMAIL: haoran.mc@outlook.com
#+DATE: 2022-12-25 01:12 Sun
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="static/css/org.css"/>
#+DESCRIPTION: Copyright © 2022, Haoran Liu, all rights reserved.

* 完成目标：
- 将路由（ ~router~ ）独立出来，方便之后增强；
- 设计上下文（ ~Content~ ），封装 Request 和 Response，提供对 JSON、HTML 等返回类型的支持；
* 使用效果：
#+begin_src go
  func main() {
      r := gee.New()
      r.GET("/", func(c *gee.Context) {
          c.HTML(http.StatusOK, "<h1>Hello Gee</h1>")
      })
      r.GET("/hello", func(c *gee.Context) {
          // expect /hello?name=haoran
          c.String(http.StatusOK, "hello %s, you're at %s\n", c.Query("name"), c.Path)
      })

      r.POST("/login", func(c *gee.Context) {
          c.JSON(http.StatusOK, gee.H{
              "username": c.PostForm("username"),
              "password": c.PostForm("password"),
          })
      })

      r.Run(":9999")
  }
#+end_src

- ~Handler~ 的参数变成了 ~gee.Context~ ；
- 提供了查询 ~Query~ 、 ~PostForm~ 参数的功能；
- ~gee.Context~ 封装了 ~HTML/String/JSON~ 函数，能够快速构造 HTTP 响应；
* 设计 Context
** 必要性
1. 对 Web 服务来说，无非是根据请求 ~*http.Request~ ，构造响应 ~http.ResponseWriter~ 。但是这两个对象提供的接口粒度太细，比如我们要构造一个完整的响应，需要考虑消息头（Header）和消息体（Body），而 Header 包含了状态码（StatusCode），消息类型（ContentType）等几乎每次请求都需要设置的信息。因此，如果不进行有效的封装，那么框架的用户将需要写大量重复，繁杂的代码，而且容易出错。针对常用场景，能够高效地构造出 HTTP 响应是一个好的框架必须考虑的点。

   用返回 JSON 数据作比较，感受下封装前后的差距：

   封装前：

   #+begin_src go
     obj = map[string]interface{}{   // 响应体中的消息主体（响应体中还可能有其他内容）
         "name": "haoran",
         "password": "1234",
     }
     w.Header().Set("Content-Type", "application/json")   // 设置 HTTP 响应报文响应头属性 Content-Type，消息主体使用何种方式编码的
     w.WriteHeader(http.StatusOK)   // 设置 HTTP 响应报文响应行中的状态码
     encoder := json.NewEncoder(w)   // 使用 json 格式编码，与上面的 Content-Type 一致
     if err := encoder.Encode(obj); err != nil {
         http.Error(w, err.Error(), 500)
     }
   #+end_src

   封装后：

   #+begin_src go
     c.JSON(http.StatusOK, gee.H{
         "username": c.PostForm("username"),
         "password": c.PostForm("password"),
     })
   #+end_src

2. 针对使用场景，封装 ~*http.Request~ 和 ~http.ResponseWriter~ 的方法，简化相关接口的调用，只是设计 Context 的原因之一。对于框架来说，还需要支撑额外的功能。例如，将来解析动态路由 ~/hello/:name~ ，参数 ~:name~ 的值放在哪呢？再比如，框架需要支持中间件，那中间件产生的信息放在哪呢？ _Context 随着每一个请求的出现而产生，请求的结束而销毁，和当前请求强相关的信息都应由 Context 承载。_ 因此，设计 Context 结构，扩展性和复杂性留在了内部，而对外简化了接口。 _路由的处理函数，以及将要实现的中间件，参数都统一使用 Context 实例_ ， Context 就像一次会话的百宝箱，可以找到任何东西。
** 具体实现
#+begin_quote
gee/context.go
#+end_quote

#+begin_src go
  type H map[string]interface{}

  type Context struct {
      // origin objects
      Writer http.ResponseWriter
      Req    *http.Request
      // request info
      Path   string
      Method string
      // response info
      StatusCode int
  }

  func newContext(w http.ResponseWriter, req *http.Request) *Context {
      return &Context{
          Writer: w,
          Req:    req,
          Path:   req.URL.Path,
          Method: req.Method,
      }
  }

  func (c *Context) PostForm(key string) string {
      return c.Req.FormValue(key)
  }

  func (c *Context) Query(key string) string {
      return c.Req.URL.Query().Get(key)
  }

  func (c *Context) Status(code int) {
      c.StatusCode = code
      c.Writer.WriteHeader(code)
  }

  func (c *Context) SetHeader(key string, value string) {
      c.Writer.Header().Set(key, value)
  }

  func (c *Context) String(code int, format string, values ...interface{}) {
      c.SetHeader("Content-Type", "text/plain")
      c.Status(code)
      _, _ = c.Writer.Write([]byte(fmt.Sprintf(format, values...)))
  }

  func (c *Context) JSON(code int, obj interface{}) {
      c.SetHeader("Content-Type", "application/json")
      c.Status(code)
      encoder := json.NewEncoder(c.Writer)
      if err := encoder.Encode(obj); err != nil {
          http.Error(c.Writer, err.Error(), 500)
      }
  }

  func (c *Context) Data(code int, data []byte) {
      c.Status(code)
      _, _ = c.Writer.Write(data)
  }

  func (c *Context) HTML(code int, html string) {
      c.SetHeader("Content-Type", "text/html")
      c.Status(code)
      _, _ = c.Writer.Write([]byte(html))
  }
#+end_src

- 代码最开头，给 ~map[string]interface{}~ 起了一个别名 ~gee.H~ ，构建 JSON 数据时更简洁；
- ~Context~ 目前只包含了 ~http.ResponseWriter~ 和 ~*http.Request~ ，另外提供了对 Method 和 Path 这两个常用属性的直接访问；
- 提供了访问 Query 和 PostForm 参数的方法（对 net/http 功能的封装）；
- 提供了快速构造 ~String/Data/JSON/HTML~ 响应的方法；
** 总结 Context 是干什么的呢？
1. （请求）获取前端传来的信息，是使用 GET 还是 POST、是使用 Query 还是 PostForm，这些都是和前端商量好的；

   使用内置包也可以获得这些信息，但是封装起来更友好；

2. （响应）设置响应内容，状态码、编码方式、消息主体；

   使用内置包也可以设置这些信息，但是封装起来更友好；
* 路由（Router）
我们将和路由相关的方法和结构提取了出来，放到了一个新的文件中 ~router.go~ ，方便我们下一次对 router 的功能进行增强，例如提供动态路由的支持。 router 的 handle 方法作了一个细微的调整，即 handler 的参数，变成了 Context。

#+begin_quote
gee/router.go：
#+end_quote

#+begin_src go
  type router struct {
      handlers map[string]HandlerFunc
  }

  func newRouter() *router {
      return &router{
          handlers: make(map[string]HandlerFunc),
      }
  }

  func (r *router) addRoute(method string, pattern string, handler HandlerFunc) {
      log.Printf("Route %4s - %s", method, pattern)
      key := method + "-" + pattern
      r.handlers[key] = handler
  }

  func (r *router) handle(c *Context) {
      key := c.Method + "-" + c.Path
      if handler, ok := r.handlers[key]; ok {
          handler(c)
      } else {
          c.String(http.StatusNotFound, "404 NOT FOUND: %s\n", c.Path)
      }
  }
#+end_src
* 框架入口
#+begin_quote
gee/gee.go
#+end_quote

#+begin_src go
  // HandlerFunc defines the request handler used by gee
  type HandlerFunc func(*Context)

  // Engine implement the interface of ServeHTTP
  type Engine struct {
      router *router
  }

  // New is the constructor of gee.Engine
  func New() *Engine {
      return &Engine{
          router: newRouter(),
      }
  }

  func (engine *Engine) addRoute(method string, pattern string, handler HandlerFunc) {
      engine.router.addRoute(method, pattern, handler)
  }

  // GET defines the method to add GET request
  func (engine *Engine) GET(pattern string, handler HandlerFunc) {
      engine.addRoute("GET", pattern, handler)
  }

  // POST defines the method to add POST request
  func (engine *Engine) POST(pattern string, handler HandlerFunc) {
      engine.addRoute("POST", pattern, handler)
  }

  // Run defines the method to start a http server
  func (engine *Engine) Run(addr string) (err error) {
      return http.ListenAndServe(addr, engine)
  }

  func (engine *Engine) ServeHTTP(w http.ResponseWriter, req *http.Request) {
      c := newContext(w, req)   // get the request header and request body
      // We mapped functions to strings that combine methods and paths.
      // Now by requesting information, we can get the corresponding function.
      engine.router.handle(c)
  }
#+end_src

将 ~router~ 相关的代码独立后， ~gee.go~ 简单了不少。最重要的还是通过实现了 ServeHTTP 接口，接管了所有的 HTTP 请求。相比第一天的代码，这个方法也有细微的调整， _在调用 router.handle 之前，构造了一个 Context 对象（用来存放请求与响应过程中的各种信息）_ 。这个对象目前还非常简单，仅仅是包装了原来的两个参数，之后我们会慢慢地给Context插上翅膀。

如何使用， ~main.go~ 一开始就已经亮相了。运行 ~go run main.go~ ，借助 curl ，一起看一看今天的成果吧。

#+begin_example
    $ curl -i http://localhost:9999/
    HTTP/1.1 200 OK
    Content-Type: text/html
    Date: Fri, 27 May 2022 09:15:58 GMT
    Content-Length: 19

    <h1>Hello Gee!</h1>

    $ curl "http://localhost:9999/hello?name=haoran"
    hello haoran, you're at /hello

    $ curl "http://localhost:9999/login" -X POST -d 'username=haoran&password=123456'
    {"password":"123456","username":"haoran"}

    $ curl "http://localhost:9999/xxx"
    404 NOT FOUND: /xxx
#+end_example
